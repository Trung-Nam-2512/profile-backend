import dotenv from 'dotenv'
import { connectDatabase, disconnectDatabase } from '../utils/database'
import { PostModel } from '../models/Post'
import { UserModel } from '../models/User'

// Load environment variables
dotenv.config()

const seedPosts = async () => {
  try {
    console.log('üå± Starting posts seeding...')

    // Connect to database
    await connectDatabase()

    // Find admin user
    const adminUser = await UserModel.findOne({ role: 'ADMIN' })
    if (!adminUser) {
      console.error('‚ùå Admin user not found. Please run seed-admin first.')
      return
    }

    // Check if posts already exist
    const existingPosts = await PostModel.countDocuments()
    if (existingPosts > 3) {
      console.log('‚úÖ Posts already exist, skipping seeding')
      return
    }

    // Sample posts
    const samplePosts = [
      {
        title: 'L√†m Sao C√≥ T∆∞ Duy Tri·ªÉn Khai H·ªá Th·ªëng',
        slug: 'lam-sao-co-tu-duy-trien-khai-he-thong',
        excerpt:
          'Kh√°m ph√° nh·ªØng nguy√™n t·∫Øc c∆° b·∫£n ƒë·ªÉ thi·∫øt k·∫ø v√† tri·ªÉn khai h·ªá th·ªëng software hi·ªáu qu·∫£, t·ª´ ki·∫øn tr√∫c ƒë·∫øn deployment.',
        content: `# L√†m Sao C√≥ T∆∞ Duy Tri·ªÉn Khai H·ªá Th·ªëng

## Gi·ªõi thi·ªáu

Tri·ªÉn khai h·ªá th·ªëng software kh√¥ng ch·ªâ l√† vi·ªác code v√† deploy. ƒê√≥ l√† ngh·ªá thu·∫≠t k·∫øt h·ª£p gi·ªØa **technical skills** v√† **system thinking** ƒë·ªÉ t·∫°o ra solutions b·ªÅn v·ªØng.

## Nh·ªØng Nguy√™n T·∫Øc C∆° B·∫£n

### 1. Think Big, Start Small
- B·∫Øt ƒë·∫ßu v·ªõi **MVP** (Minimum Viable Product)
- Scale t·ª´ng b∆∞·ªõc m·ªôt c√°ch c√≥ ki·ªÉm so√°t
- Lu√¥n c√≥ **rollback plan**

### 2. Ki·∫øn Tr√∫c Modular
Thi·∫øt k·∫ø h·ªá th·ªëng theo modules ƒë·ªÉ d·ªÖ maintain v√† scale.

### 3. Monitoring & Observability
- **Logs**: Ghi l·∫°i m·ªçi h√†nh ƒë·ªông quan tr·ªçng
- **Metrics**: CPU, Memory, Response time
- **Alerts**: Ph√°t hi·ªán s·ªõm v·∫•n ƒë·ªÅ

## Database Design

Thi·∫øt k·∫ø database schema c√≥ th·ªÉ evolution theo th·ªùi gian.

## Security First

### Authentication & Authorization
- **JWT** cho stateless auth
- **Role-based** access control
- **Input validation** ·ªü m·ªçi layer

### Data Protection
- Encrypt sensitive data
- HTTPS everywhere
- Regular security audits

## Performance Considerations

### Database Optimization
- **Indexes** cho queries th∆∞·ªùng d√πng
- **Connection pooling**
- **Query optimization**

### Caching Strategy
Implement caching ƒë·ªÉ gi·∫£m load database v√† tƒÉng response time.

## Deployment Strategy

### Environment Management
- **Development**: Local testing
- **Staging**: Pre-production validation  
- **Production**: Live system

### CI/CD Pipeline
1. **Code commit** ‚Üí Git repository
2. **Automated tests** ‚Üí Pass/Fail gate
3. **Build** ‚Üí Create deployable artifact
4. **Deploy** ‚Üí Rolling deployment
5. **Verify** ‚Üí Health checks

## Troubleshooting Mindset

### When Things Go Wrong
1. **Don't panic** - Take systematic approach
2. **Check logs** first
3. **Roll back** if necessary
4. **Post-mortem** analysis

### Common Issues
- **Memory leaks**: Use profiling tools
- **Database locks**: Analyze slow queries
- **Network timeouts**: Check infrastructure

## Tools & Technologies

### Development
- **Version Control**: Git with proper branching
- **Testing**: Unit + Integration + E2E
- **Code Quality**: ESLint, SonarQube

### Infrastructure  
- **Containerization**: Docker
- **Orchestration**: Kubernetes
- **Monitoring**: Prometheus, Grafana
- **Logging**: ELK Stack

## Best Practices Summary

### Code Organization
Organize code theo layers: Controllers, Services, Repositories.

### Documentation
- **README**: Project overview
- **API Docs**: OpenAPI/Swagger
- **Architecture**: High-level diagrams
- **Runbooks**: Operational procedures

## K·∫øt Lu·∫≠n

T∆∞ duy tri·ªÉn khai h·ªá th·ªëng l√† k·∫øt h·ª£p gi·ªØa:
- **Technical expertise**: Bi·∫øt d√πng tools v√† technologies
- **System thinking**: Nh√¨n to√†n c·ª•c v√† t∆∞∆°ng lai
- **Practical experience**: H·ªçc t·ª´ failures v√† successes

**Next Steps:**
1. Th·ª±c h√†nh v·ªõi pet projects
2. ƒê·ªçc case studies c·ªßa big tech
3. Tham gia open source projects

---

*B·∫°n ƒë√£ t·ª´ng g·∫∑p challenges g√¨ khi tri·ªÉn khai h·ªá th·ªëng? Share experience trong comments nh√©! üöÄ*`,
        tags: [
          'system-design',
          'architecture',
          'backend',
          'devops',
          'best-practices',
        ],
        published: true,
        authorId: String(adminUser._id),
        publishedAt: new Date(),
      },
      {
        title: 'React Performance Optimization - 5 K·ªπ Thu·∫≠t Hi·ªáu Qu·∫£',
        slug: 'react-performance-optimization-ky-thuat-hieu-qua',
        excerpt:
          'TƒÉng t·ªëc React application v·ªõi 5 k·ªπ thu·∫≠t optimization quan tr·ªçng: React.memo, useMemo, useCallback, code splitting v√† lazy loading.',
        content: `# React Performance Optimization - 5 K·ªπ Thu·∫≠t Hi·ªáu Qu·∫£

## T·∫°i Sao Performance Quan Tr·ªçng?

React app ch·∫≠m = User experience k√©m = Bounce rate cao = Revenue gi·∫£m. 

**Statistics:**
- 1 gi√¢y delay = 7% conversion loss
- 40% users r·ªùi trang n·∫øu load > 3 gi√¢y
- Mobile users k·ª≥ v·ªçng load < 2 gi√¢y

## K·ªπ Thu·∫≠t 1: React.memo

Wrap components v·ªõi React.memo ƒë·ªÉ tr√°nh re-render kh√¥ng c·∫ßn thi·∫øt.

## K·ªπ Thu·∫≠t 2: useMemo Hook

S·ª≠ d·ª•ng useMemo cho expensive calculations v√† heavy filtering/sorting.

## K·ªπ Thu·∫≠t 3: useCallback Hook

Memoize functions v·ªõi useCallback ƒë·ªÉ tr√°nh t·∫°o new functions m·ªói render.

## K·ªπ Thu·∫≠t 4: Code Splitting

### Route-based Splitting
Import components v·ªõi lazy loading ƒë·ªÉ gi·∫£m initial bundle size.

### Component-based Splitting  
Lazy load heavy components ch·ªâ khi c·∫ßn thi·∫øt.

## K·ªπ Thu·∫≠t 5: Virtualization

S·ª≠ d·ª•ng virtualization cho lists c√≥ nhi·ªÅu items (1000+).

## Performance Measurement

### React DevTools Profiler
1. Install React DevTools extension
2. Go to Profiler tab  
3. Click record ‚Üí interact ‚Üí stop
4. Analyze render times

## K·∫øt Qu·∫£ ƒêo L∆∞·ªùng

### Before Optimization
- Initial bundle: **2.5MB**
- FCP: **4.2s**
- LCP: **6.8s**
- React renders: **1,247**

### After Optimization  
- Initial bundle: **750KB** (-70%)
- FCP: **1.8s** (-57%)
- LCP: **2.4s** (-65%)
- React renders: **89** (-93%)

## Best Practices

### Do's ‚úÖ
- Profile before optimizing
- Measure real-world impact
- Use React DevTools Profiler
- Optimize critical rendering path
- Lazy load non-essential features

### Don'ts ‚ùå
- Premature optimization
- Memo everything blindly  
- Ignore bundle size
- Skip performance budgets
- Optimize without measuring

## K·∫øt Lu·∫≠n

React performance optimization l√† marathon, kh√¥ng ph·∫£i sprint. H√£y:

1. **Measure first** - Profile tr∆∞·ªõc khi optimize
2. **Focus on impact** - ∆Øu ti√™n bottlenecks l·ªõn nh·∫•t
3. **Test thoroughly** - ƒê·∫£m b·∫£o kh√¥ng break functionality
4. **Monitor continuously** - Track performance metrics

**Your turn**: Implement m·ªôt trong 5 k·ªπ thu·∫≠t n√†y v√†o project c·ªßa b·∫°n v√† share k·∫øt qu·∫£! üöÄ

---

*B·∫°n ƒë√£ th·ª≠ technique n√†o? Performance improvement bao nhi√™u %? Comment below!*`,
        tags: [
          'react',
          'performance',
          'optimization',
          'javascript',
          'frontend',
        ],
        published: true,
        authorId: String(adminUser._id),
        publishedAt: new Date(Date.now() - 86400000), // 1 day ago
      },
      {
        title: 'Docker Tutorial - Containerization cho Beginners',
        slug: 'docker-tutorial-containerization-cho-beginners',
        excerpt:
          'H·ªçc Docker t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao: t·∫°o containers, Dockerfile, docker-compose v√† best practices cho development.',
        content: `# Docker Tutorial - Containerization cho Beginners

## Docker L√† G√¨?

Docker l√† platform gi√∫p **package** applications c√πng v·ªõi t·∫•t c·∫£ dependencies th√†nh **containers** - portable units c√≥ th·ªÉ ch·∫°y ·ªü b·∫•t k·ª≥ ƒë√¢u.

### T·∫°i Sao C·∫ßn Docker?

**Problem**: "It works on my machine" üòÖ

**Solution**: Container ƒë√≥ng g√≥i everything!

## Core Concepts

### Images vs Containers
- **Image** = Template/Blueprint
- **Container** = Running instance of image

### Dockerfile
Recipe ƒë·ªÉ build image v·ªõi c√°c steps nh∆∞ copy files, install dependencies, expose ports.

## Getting Started

### Installation
1. Download **Docker Desktop**
2. Install v√† start
3. Verify installation

### First Container
Ch·∫°y hello-world container ƒë·ªÉ test Docker installation.

## Real Project Example

### Node.js Application
T·∫°o simple Express app v√† containerize n√≥.

### Dockerfile
FROM node:16-alpine, set WORKDIR, copy files, install deps, expose port, start app.

### Build & Run
Build image v√† run container v·ªõi port mapping.

## Docker Compose

### Multi-service Applications
Setup app v·ªõi database v√† cache s·ª≠ d·ª•ng docker-compose.yml.

### Commands
- docker-compose up: start all services
- docker-compose down: stop all services
- docker-compose logs: view logs

## Production Best Practices

### Multi-stage Builds
Optimize image size v·ªõi separate build v√† runtime stages.

### Security
- Use specific versions (not latest)
- Create non-root user
- Use .dockerignore

## Development Workflow

### Hot Reload Setup
Setup development environment v·ªõi volume mounting cho live reload.

## Debugging

### Common Issues
- Check container status v·ªõi docker ps
- View logs v·ªõi docker logs
- Access container shell v·ªõi docker exec

## Useful Commands Cheatsheet

### Images
- docker images: list images
- docker rmi: remove image
- docker image prune: cleanup

### Containers  
- docker ps: list containers
- docker stop/start: control containers
- docker rm: remove container

## Next Steps

### Learn More
1. **Kubernetes**: Container orchestration
2. **Docker Swarm**: Docker's native clustering  
3. **CI/CD**: Automated deployments
4. **Security**: Container scanning, secrets management

### Practice Projects
- Dockerize existing Node.js/Python app
- Multi-service app v·ªõi database
- Setup CI/CD pipeline v·ªõi Docker
- Deploy to cloud platforms

---

**Challenge**: Dockerize m·ªôt project hi·ªán t·∫°i c·ªßa b·∫°n v√† share experience! Container c√≥ gi√∫p deployment d·ªÖ d√†ng h∆°n kh√¥ng? üê≥`,
        tags: [
          'docker',
          'devops',
          'containerization',
          'deployment',
          'tutorial',
        ],
        published: false, // Draft post
        authorId: String(adminUser._id),
      },
    ]

    // Create posts
    await PostModel.insertMany(samplePosts)

    console.log(`‚úÖ Created ${samplePosts.length} sample posts`)
    console.log('üìÑ Posts:')
    samplePosts.forEach(post => {
      console.log(
        `   - ${post.title} (${post.published ? 'Published' : 'Draft'})`
      )
    })
  } catch (error) {
    console.error('‚ùå Error seeding posts:', error)
    process.exit(1)
  } finally {
    await disconnectDatabase()
    process.exit(0)
  }
}

// Run the seed function if this script is executed directly
if (require.main === module) {
  seedPosts()
}

export { seedPosts }
